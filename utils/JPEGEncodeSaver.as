package utils {		import flash.display.BitmapData;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.IOErrorEvent;	import flash.events.HTTPStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.net.FileReference;	import flash.utils.ByteArray;		import org.bytearray.jpeg.JPEGEncoder;		/**	 * BitmapData を JPG にエンコードして任意の場所に保存するクラスです.	 * <p>※別途 JPGEncoder が必要です</p>	 * 	 * @author axcel-work	 * @version 0.1	 * @since 2010/12/01	 * @usage	 * 	 */	public class JPEGEncodeSaver extends EventDispatcher {		private var _file:FileReference;				/**		 * 新しい JPEGEncodeSaver インスタンスを作成します		 */		public function JPEGEncodeSaver() {			this._file = new FileReference();			this._file.addEventListener(Event.OPEN, open, false, 0, true);			this._file.addEventListener(ProgressEvent.PROGRESS, progress, false, 0, true);			this._file.addEventListener(Event.COMPLETE, complete, false, 0, true);			this._file.addEventListener(IOErrorEvent.IO_ERROR, ioerror, false, 0, true);			this._file.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpstatus, false, 0, true);			this._file.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityerror, false, 0, true);		}				/**		 * BitmapData と ファイル名を受け取り、ローカルに保存するダイアログボックスを表示する		 * @param btData		 * @param fileName		 */		public function save(btData:BitmapData, fileName:String):void {						// 引数の BitmapData を用いてやると Stage 上から消えてしまうためクローン作成			var bitmapData:BitmapData = new BitmapData(btData.width, btData.height);			bitmapData.lock();			bitmapData.draw(btData);			bitmapData.unlock();			var encoder:JPEGEncoder = new JPEGEncoder(100);			var byteArray:ByteArray = encoder.encode(bitmapData);			this._file.save(byteArray, fileName);						bitmapData.dispose();		}				private function open(evt:Event):void {			dispatchEvent(evt);		}		private function progress(evt:ProgressEvent):void {			dispatchEvent(evt);		}		private function complete(evt:Event):void {			dispatchEvent(evt);		}		private function ioerror(evt:IOErrorEvent):void {			dispatchEvent(evt);		}		private function httpstatus(evt:HTTPStatusEvent):void {			dispatchEvent(evt);		}		private function securityerror(evt:SecurityErrorEvent):void {			dispatchEvent(evt);		}	}}